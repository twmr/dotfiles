#[pager]
#    diff = delta
#    log = delta
#    reflog = delta
#    show = delta

[alias]
	st = status
	lol = log --graph --decorate --pretty=oneline --abbrev-commit
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
	apple-pick = !sh -c 'git rev-list --reverse "$@" | xargs -n1 git cherry-pick' -
	pd = pull --dry-run
	sua = submodule foreach 'git fetch origin && git checkout -f master && git pull'
	scomp = submodule foreach '[[ -e Makefile ]] && make||:'
	sc = !git sua && git scomp
	aliases = config --get-regexp ^alias\\.
	al = !git aliases
	cp = cherry-pick
	co = commit
	dc = diff --color-words
	find-file = "!for branch in $(git for-each-ref --format=\"%(refname)\" refs/remotes/origin); do \
			if git ls-tree -r --name-only $branch | grep \"$1\" > /dev/null; then \
				echo \"${branch}:\"; \
				git ls-tree -r --name-only $branch | nl -bn -w3 | grep \"$1\"; fi; \
			done; :"
	find-file-local = "!for branch in $(git for-each-ref --format=\"%(refname)\" refs/heads); do if git ls-tree -r --name-only $branch | grep \"$1\" > /dev/null; then  echo \"${branch}:\"; git ls-tree -r --name-only $branch | nl -bn -w3 | grep \"$1\"; fi; done; :"
	grep-all = "!git grep --heading --break --line-number \"$1\" $(git branch -r | grep -v '>'); : "
	grep-all-erenik = "!git grep --heading --break --line-number \"$1\" $(git branch -r | grep -v '>' | egrep '\\-erenik'); : "
	grep-all-fiora = "!git grep --heading --break --line-number \"$1\" $(git branch -r | grep -v '>' | egrep '\\-fiora'); : "
	grep-all-drina = "!git grep --heading --break --line-number \"$1\" $(git branch -r | grep -v '>' | grep drina); : "
	grep-all-isar = "!git grep --heading --break --line-number \"$1\" $(git branch -r | grep -v '>' | grep isar); : "
	grep-all-gaia = "!git grep --heading --break --line-number \"$1\" $(git branch -r | grep -v '>' | grep gaia); : "
	grep-all-kalix = "!git grep --heading --break --line-number \"$1\" $(git branch -r | grep -v '>' | grep kalix); : "
	grep-all-jackson = "!git grep --heading --break --line-number \"$1\" $(git branch -r | grep -v '>' | grep jackson); : "
	grep-all-main = "!git grep --heading --break --line-number \"$1\" $(git branch -r | grep -v '>' | grep main); : "
	grep-customer-tc = "!git grep --heading --break --line-number \"$1\" $(git branch -r | grep -v '>' | egrep tc[0-9]+$); : "
	grep-customer-se = "!git grep --heading --break --line-number \"$1\" $(git branch -r | grep -v '>' | egrep se[0-9]+$); : "
	grep-customer-am = "!git grep --heading --break --line-number \"$1\" $(git branch -r | grep -v '>' | egrep am[0-9]+$); : "
	grep-customer-in = "!git grep --heading --break --line-number \"$1\" $(git branch -r | grep -v '>' | egrep in[0-9]+$); : "
	lt-fitb = "!git ls-tree $(git branch -r | grep -v '>' | egrep fitb[0-9]+$) -r --name-only : "
	lt-fitb2 = "!git ls-tree $(git branch -r | grep -v '>' | egrep fitb[0-9]+$) -r --name-only | egrep \"$1\" : "

# todo use includIf gitdir:...
[include]
	path = ~/.git_identity
[color]
	ui = auto
[pack]
	threads = 0
[apply]
	whitespace = strip
[github]
	user = twmr
[core]
        # editor = vim
	excludesfile = ~/.gitignore
[push]
	default = simple
[oh-my-zsh]
	hide-status = 1

# http://stackoverflow.com/questions/14273531/how-to-sort-git-tags-by-version-string-order-of-form-rc-x-y-z-w
# https://github.com/git/git/commit/f57610a1ff7a547d1e11e24f942b1703cea81f81
[tag]
	sort = version:refname
[versionsort]
	prereleaseSuffix = alpha
	prereleaseSuffix = .alpha
	prereleaseSuffix = beta
	prereleaseSuffix = .beta
	prereleaseSuffix = rc
	prereleaseSuffix = .rc
[merge]
	conflictStyle = diff3
[pull]
	rebase = true
[init]
	defaultBranch = main
