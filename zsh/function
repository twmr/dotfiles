#!/bin/zsh
#
# reload zshrc
function src() {
    autoload -U zrecompile
    [[ -f ~/.zshrc ]] && zrecompile -p ~/.zshrc
    for i in "$(find ~/.zsh/ -type f)"; do
        [[ -f $i ]] && zrecompile -p $i
        [[ -f $i.zwc.old ]] && rm -f $i.zwc.old
    done
    [[ -f ~/.zcompdump ]] && zrecompile -p ~/.zcompdump
    [[ -f ~/.zcompdump ]] && zrecompile -p ~/.zcompdump
    [[ -f ~/.zshrc.zwc.old ]] && rm -f ~/.zshrc.zwc.old
    [[ -f ~/.zcompdump.zwc.old ]] && rm -f ~/.zcompdump.zwc.old
    source ~/.zshrc
}


function urxvtc() {
    /bin/urxvtc "$@"
    if [ $? -eq 2 ]; then
        /bin/urxvtd -q -o -f
        /bin/urxvtc "$@"
    fi
}

# update emacs
function eup()
{
    (cd ~gr/emacs
     gpl
     compile_emacs)
}

function act() {
    echo "activate virtualenv in $1"
    source $1/bin/activate
}

function devt2() {
    (conda activate devtool2; dev $*)
}

function melmacs() {
    emacs -Q --eval "(add-to-list 'package-archives '(\"melpa\" . \"http://melpa.milkbox.net/packages/\") t)"
}

function dired() {
    if [ $# -gt 0 ]; then
        dirname="$1"
    else
        dirname="$HOME"
    fi
    emacsclient -c -eval "(dired \"$dirname\")"
}

_emacs_setup() {
    local name=$1
    echo $name
    if [ -L ~/.emacs.d ]; then
        unlink ~/.emacs.d
    fi
    if [ -L ~/.emacs ]; then
        unlink ~/.emacs
    fi
    if [ -e ~/.emacs.d ]; then
        echo "deleting .emacs.d"
        rm -rf ~/.emacs.d
    fi

    if [ -e ~dotf/$name ]; then
        echo ln -s ~dotf/$name ~/.emacs
        ln -s ~dotf/$name ~/.emacs
    fi
    echo ln -s ~dotf/${name}.d ~/.emacs.d
    ln -s ~dotf/${name}.d ~/.emacs.d
}

function clean_bank_json() {
    local json=$1
    jq '' $json | sponge $json
}

function emacs_melpa_setup() {
    _emacs_setup "emacs_with_melpa"
}

function emacs_comp_setup() {
    _emacs_setup "emacs_with_company"
}

function emacs_test_setup() {
    _emacs_setup "emacs_with_test"
}

function emacs_elget_setup() {
    _emacs_setup "emacs_with_elget"
}

function emacs_graphene_setup() {
    _emacs_setup "emacs_with_graphene"
}

function emacs_std_setup() {
    _emacs_setup "emacs"
}

function add-alias() {
    local name=$1 value="$2"
    echo "alias $name='$value'" >> ~/.zsh/alias
    eval "alias $name='$value'"
    alias $name
}

#running process search
function psea() {
    local pregex=$1
    ps ax | grep -i $pregex
}

function concatpdf() {
    echo "saving concatenated pdf to output.pdf"
    /bin/gs -q -sPAPERSIZE=a4 -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=output.pdf $*
}


function GG() { grep -RiI --exclude-dir=.svn  --exclude-dir=.git $* * }

# git functions
function ga() { git add $* }
function gb() { git branch $* }
function gf() { git fetch $* }
function gd() { git diff --ignore-submodules $* }
function gg() { git grep $* }
function glol() { git lola $* }
function gk() { gitk --all $* & }
function gl() { git log $* }
function glu() { git log -u $* }
function gs() { git status $* }
function gsvr() { git svn rebase $* }
function gp() { git push $* }
function gc() { git commit -m "$*" }
function gcl() { git clone "$*" }
function gpl() { git pull --recurse-submodules=yes $* }
function gps() { git push $* }
function gsr() { git svn rebase $* }
function gri() { git rebase -i $* }
function grev() { git review $* }
function gf() { git fetch $* }
function grv() { git review $* }
function grvd() {
    if [ -z "$1" ]; then
        git review -l
    else
        git review -d $*
    fi
}
function gco() {
    if [ -z "$1" ]; then
        git checkout master
    else
        git checkout $1
    fi
}
function gcf() {
    git checkout -f $*
}

function gpr() { git pull --rebase $* }
function gpra() { git pull --rebase --autostash $* }

function ginf() {
    cat "$(git rev-parse --show-toplevel)"/.git/config
}

function gsed() {
    for x in `git ls-files`; do

        if [ -h $x ]; then
            # symbolic link
            continue
        fi

        if [ -f $x ]; then
            sed -r -i $1 $x;
        fi

    done
}


function gsednor() {
    # same as gsed but without the -r flag
    for x in `git ls-files`; do
        if [ -h $x ]; then
            # symbolic link
            continue
        fi
        if [ -f $x ]; then
            sed -i $1 $x;
        fi
    done
}


function convert_imspb2() {
    gsed 's/from ims.pb2 import (\S*)/import \1\_pb2/g'
    gsed 's/import ims.pb2.(\S*)/import \1\_pb2/g'
    gsed 's/from ims.pb2.(\S*) import/from \1\_pb2 import/g'
}



function reset_to_upstream() {
    git reset --hard "@{upstream}"
}

function git_clean_all_including_submodules() {
    git stash
    git submodule foreach "git reset --hard && git clean -ffdx" && git clean -ffd
}

function gitgrep_in_sandbox() {
    for X in $(find . -maxdepth 1 -type d); do
        [ -d $X/.git ] && (cd $X;
                           echo $X;
                           GIT_PAGER=cat git grep $*)
    done
}

function makecf {
    (cd ${CFBD} && make)
}

function pastie {
    url=$(curl http://pastie.caboo.se/pastes/create \
  -H "Expect:" \
  -F "paste[parser]=plain_text" \
  -F "paste[body]=<-" \
  -F "paste[authorization]=burger" \
  -s -L -o /dev/null -w "%{url_effective}")
    echo -n "$url" | xclip
    echo "$url"
}

extract_archive () {
    local old_dirs current_dirs lower
    lower=${(L)1}
    old_dirs=( *(N/) )
    if [[ $lower == *.tar.gz || $lower == *.tgz ]]; then
        tar xvzf $1
    elif [[ $lower == *.gz ]]; then
        gunzip $1
    elif [[ $lower == *.tar.bz2 || $lower == *.tbz ]]; then
        tar xvjf $1
    elif [[ $lower == *.bz2 ]]; then
        bunzip2 $1
    elif [[ $lower == *.zip ]]; then
        unzip $1
    elif [[ $lower == *.rar ]]; then
        unrar e $1
    elif [[ $lower == *.tar ]]; then
        tar xvf $1
    elif [[ $lower == *.lha ]]; then
        lha e $1
    else
        print "Unknown archive type: $1"
        return 1
    fi
    # Change in to the newly created directory, and
    # list the directory contents, if there is one.
    current_dirs=( *(N/) )
    for i in {1..${#current_dirs}}; do
        if [[ $current_dirs[$i] != $old_dirs[$i] ]]; then
            cd $current_dirs[$i]
            break
        fi
    done
}

roll () {
    FILE=$1
    case $FILE in
        *.tar.bz2) shift && tar cjf $FILE $* ;;
        *.tar.gz) shift && tar czf $FILE $* ;;
        *.tgz) shift && tar czf $FILE $* ;;
        *.zip) shift && zip $FILE $* ;;
        *.rar) shift && rar $FILE $* ;;
    esac
}

function mkcd() { mkdir "$1" && cd "$1"; }
function hex2dec { awk 'BEGIN { printf "%d\n",0x$1}'; }
function dec2hex { awk 'BEGIN { printf "%x\n",$1}'; }

function mkmine() { sudo chown -R ${USER} ${1:-.}; }
# sanitize - set file/directory owner and permissions to normal values (644/755)
# Usage: sanitize <file>
function sanitize() {
    chmod -R u=rwX,go=rX "$@"
    chown -R ${USER}.users "$@"
}

function calculeer() { echo "$@" | bc }

function git_info {
    local g="$(git rev-parse --git-dir 2>/dev/null)"
    if [ -n "$g" ]; then
  local r
  local b
  if [ -d "$g/../.dotest" ]
  then
            if test -f "$g/../.dotest/rebasing"
            then
    r="|REBASE"
            elif test -f "$g/../.dotest/applying"
            then
    r="|AM"
            else
    r="|AM/REBASE"
            fi
            b="$(git symbolic-ref HEAD 2>/dev/null)"
  elif [ -f "$g/.dotest-merge/interactive" ]
  then
            r="|REBASE-i"
            b="$(cat "$g/.dotest-merge/head-name")"
  elif [ -d "$g/.dotest-merge" ]
  then
            r="|REBASE-m"
            b="$(cat "$g/.dotest-merge/head-name")"
  elif [ -f "$g/MERGE_HEAD" ]
  then
            r="|MERGING"
            b="$(git symbolic-ref HEAD 2>/dev/null)"
  else
            if [ -f "$g/BISECT_LOG" ]
            then
    r="|BISECTING"
            fi
            if ! b="$(git symbolic-ref HEAD 2>/dev/null)"
            then
    if ! b="tag: $(git describe --exact-match HEAD 2>/dev/null)"
    then
        b="$(cut -c1-7 "$g/HEAD")..."
    fi
            fi
  fi

  if [ -n "$1" ]; then
            printf "$1" "${b##refs/heads/}$r"
  else
            printf "[%s]" "${b##refs/heads/}$r"
  fi
    fi
}
#compdef '_files -g "*.gz *.tgz *.bz2 *.tbz *.zip *.rar *.tar *.lha"' extract_archive

function mgg() {
    (cd ~psc; GIT_PAGER=cat gg $*; cd ~tol; GIT_PAGER=cat gg $*) | less
}

function genpasswd() {
    tmp=$1
    echo $tmp
    [ "$tmp" = "" ] && tmp=16
    /usr/bin/tr -dc "A-Za-z0-9_!@=" < /dev/urandom | head -c ${tmp} | xargs
}

function ec() {
    if [ "$(emacsclient -e '(< 1 (length (frame-list)))')" = "nil" ]; then
        # no frame are open
        emacsclient -n -c $*
    else
        emacsclient -n -c $*
        #emacsclient -n $*
    fi
}

# find in file
function fif() {
    if [[ ! $# -gt 0 ]]; then
        echo "Need a string to search for!";
        return 1;
    fi
    rg --files-with-matches --no-messages "$1" | \
        fzf --preview \
            "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

function vterm_printf() {
    # helper function taken from
    # https://github.com/akermu/emacs-libvterm
    if [ -n "$TMUX" ]; then
        # Tell tmux to pass the escape sequences through
        # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}


function sorted_size() {
    # output the size of all files/dirs in current directory sorted by size + total size
    du -ch $(du -b * | sort -n | cut -f2-)
}

function uvr() {
    # this function has the benefit that I can finally complete filename when I run e.g.
    # uv run pytest path/to/x/y/z
    uv run "$@"
}
